 ld_ins: ld port map(
                    clk =>clk;
                    rst=> rst;
                    bcd_display_0 => ot(3 downto 0);
                    bcd_display_1 => ot(7 downto 4)

                    );

                    
        begin 
        
        if clk'Event and clk ='1' then
             -- if current_s = power_up then
             
          case current_s  is
              when power_up=>
                 -- busy <='1';
                 -- if clk_count <(1 ) then
                      --clk_count := clk_count +1;
                      --current_s <= power_up;
                 -- else
                     -- clk_count :=0;

                      rs <= '0';
                      rw <= '0';
                      data <="00110000";
                      --current_s <= initialize;
                --  end if ;
  
             -- when initialize =>
                  busy  <= '1';
                  --clk_count := clk_count +1;
                  --if clk_count <(65) then
                 -- wait for 20 ms;
                 wait 20 ms ;
                  rs <= '0' after 20 ms;
                  rw <= '0';
                      data <= "0011----";
                      en <='1';
                     -- current_s <=initialize;
                      --wait for 5 ms;
                 -- elsif clk_count<(287) then
                  rs <= '0' after 5 ms;
                  rw <= '0';
                      data <= "0011----";
                      --en<= '0';
                      --current_s <=initialize;
                  --ELSIF(clk_count<(70*freq))THEN
                 -- wait for 110 us;
                  rs <= '0' after  110 us;
                  rw <= '0';
                      data<="00001101";    
                      --en <= '1';    
                     -- current_s <=initialize;

                --  wait for 5 ms;
                      --clk_count := 0;
                      rs <= '0' after  5 ms;
                  rw <= '0';
                      data<="00000001";    
                    --  wait for 5 us;
                      busy <='0' after  5 us;
                      --lcd_enable <='1';
                      current_s <= ready;
             -- end if ;
                      --current_s <= ready;
                 -- end if ;
              --when ready =>
                  if current_s = ready THEN
                  busy <='1';
                  rs <= lbus(9);
                  rw <= lbus(8);
                  data <= lbus(7 downto 0);
                 -- clk_count :=0;
                  current_s <= send;
                  else
                      busy <='0';
                      --rs <= '0';
                     -- rw <= '0';
                      --data <= "00000000";
                      --clk_count :=0;
                      --current_s <= ready; 
                  end if;
             -- when send =>
                  --busy <='1';
                --wait for 80 us;
                    --  current_s <= ready;
                --  end case;   
                  if reset_n = '0' then
                      current_s <= power_up;
                      
             --     end if ;      
              end if ;
          end if;
         --- wait until rising_edge(clk) or falling_edge(clk) ;
                      end process;

end Behavioral;


--clk, rst, rs, rw, en, data



component mcpv 
        Port ( MISO : in STD_LOGIC;
               MOSI : out STD_LOGIC;
               CS : out STD_LOGIC;
               SCLK : out STD_LOGIC;
               CLK : in STD_LOGIC;
               ou :out std_logic_vector(7 downto 0)
               );
    end component;
    component lcdv
    port (
        bin:    in  std_logic_vector (9 downto 0);
        bcd:    out std_logic_vector (11 downto 0)
    );
end component;
component ledv
port (
    clock: in std_logic;
    ledselect: in std_logic;
    rled: out std_logic;
    gled: out std_logic
    
  ) ;
  end component ;
--   component ld 
--   port (
--     clk           : in  std_logic;
--     rst           : in  std_logic;
--     bcd_display_0 : in  std_logic_vector(3 downto 0);-- assign to first set of switches
--     bcd_display_1 : in  std_logic_vector(3 downto 0);-- assign to second set of switches
--     LED_0         : out std_logic_vector(6 downto 0);-- assign to first 7-segment display
--     LED_1         : out std_logic_vector(6 downto 0) -- assign to second 7-segment display
-- );
--     end component;


    component lc
    Port (clk : in  STD_LOGIC;
    --datain: in std_logic_vector(7 downto 0);
    lcd_bus: in std_logic_vector(9 downto 0);
       lcd_enable:in STD_LOGIC:='1';
       reset_n:in STD_LOGIC;
       busy : out std_logic :='0';
      
       rw,e,rs : out  STD_LOGIC;
       lcd_data : out  STD_LOGIC_VECTOR (7 downto 0)

       
       );
       end component ;

  --signal doutmcp:  std_logic_vector(7 downto 0);
--signal clk :std_logic
signal rst :std_logic;
signal bcd_display_0 :std_logic_vector(3 downto 0);
signal bcd_display_1 :std_logic_vector(3 downto 0);
signal LED_0 :std_logic_vector(6 downto 0);
signal LED_1 :std_logic_vector(6 downto 0);
  signal MISO :  STD_LOGIC;
  signal MOSI :  STD_LOGIC;
  signal CS :  STD_LOGIC;
  signal SCLK : STD_LOGIC;
  --signal clock:  std_logic;
  signal ledselect: std_logic;
  signal rled:  std_logic;
  signal reset_nf : std_logic;
  signal lcd_enable  : std_logic;
  signal lcd_bus  :  std_logic_vector(9 downto 0):="1000110101";
  signal lcd_clk : std_logic;
  signal busyf : std_logic;
  --signal gled:  std_logic;
  --signal bin:    std_logic_vector (9 downto 0);
  signal bcd:   std_logic_vector (11 downto 0);
signal ot:std_logic_vector(7 downto 0);           
  --signal 
        begin
            
                mcpv_ins : mcpv 
                port map (
                    MISO => dout,
                    MOSI => din,
                    cs => cs1,
                    SCLK => SCLK,
                    clk => CLK,
                    ou=>ot
                );
                --mcpoutput <=ot;
               
                process(clk)
            

            begin
                if(ot > "0000100101") then 
                ledselect <= '1';
                else 
                ledselect <= '0';
                end if;
            end process;
                ledv_ins: ledv port map(
                 clock =>CLK,
                 ledselect =>  ledselect,
                 rled => rledo,
                 gled => gledo
                );
                
                lc_ins : lc port map(
                    clk,
                    
                    lcd_bus,
                       lcd_enable, 
                        reset_nf ,
                     busyf ,
                  rwf,
                     ef,
                   rsf,
                        
                     dataout
                        --lcd_bus => lcd_bus
                    );
                    reset_nf<= '1';
            lcd_clk <= clk;